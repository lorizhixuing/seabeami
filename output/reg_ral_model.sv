/*
    THIS MODEL IS GENERATED BY UVM_REG_GEN SCRIPT AUTOMATICALLY
*/

`ifndef REG_RAL_MODEL_SV
`define REG_RAL_MODEL_SV

class reg_reg_ID extends uvm_reg;
  rand uvm_reg_field ID;

  function new(string name="reg_reg_ID",
               int unsigned n_bits,
               int has_coverage
               );
    super.new(name, n_bits, has_coverage);
  endfunction

  virtual function void build();
    
    ID = new("ID");
    ID.configure(.parent(this), .size(32), .lsb_pos(0),
                               .access("RO"), .volatile(0), .reset(32'hDEADBEEF),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
  endfunction
endclass : reg_reg_ID

class reg_reg_Clock extends uvm_reg;
  rand uvm_reg_field res_0;
  rand uvm_reg_field EN;
  rand uvm_reg_field FREQ;
  rand uvm_reg_field DIV;

  function new(string name="reg_reg_Clock",
               int unsigned n_bits,
               int has_coverage
               );
    super.new(name, n_bits, has_coverage);
  endfunction

  virtual function void build();
    
    res_0 = new("res_0");
    res_0.configure(.parent(this), .size(27), .lsb_pos(5),
                               .access("RO"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(0), .individually_accessible(0));
    
    EN = new("EN");
    EN.configure(.parent(this), .size(1), .lsb_pos(4),
                               .access("RW"), .volatile(0), .reset(32'h1),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
    
    FREQ = new("FREQ");
    FREQ.configure(.parent(this), .size(2), .lsb_pos(2),
                               .access("RW"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
    
    DIV = new("DIV");
    DIV.configure(.parent(this), .size(2), .lsb_pos(0),
                               .access("RW"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
  endfunction
endclass : reg_reg_Clock

class reg_reg_TIMER extends uvm_reg;
  rand uvm_reg_field res_0;
  rand uvm_reg_field START;
  rand uvm_reg_field ENABLE;
  rand uvm_reg_field COUNTER;

  function new(string name="reg_reg_TIMER",
               int unsigned n_bits,
               int has_coverage
               );
    super.new(name, n_bits, has_coverage);
  endfunction

  virtual function void build();
    
    res_0 = new("res_0");
    res_0.configure(.parent(this), .size(26), .lsb_pos(6),
                               .access("RO"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(0), .individually_accessible(0));
    
    START = new("START");
    START.configure(.parent(this), .size(1), .lsb_pos(5),
                               .access("WO"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
    
    ENABLE = new("ENABLE");
    ENABLE.configure(.parent(this), .size(1), .lsb_pos(4),
                               .access("RW"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
    
    COUNTER = new("COUNTER");
    COUNTER.configure(.parent(this), .size(4), .lsb_pos(0),
                               .access("RW"), .volatile(0), .reset(32'hF),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
  endfunction
endclass : reg_reg_TIMER

class block_reg_control extends uvm_reg_block;
  rand reg_reg_ID ID;
  rand reg_reg_Clock Clock;

  function new(string name="block_reg_control");
    super.new(name);
  endfunction

  function void build();
    default_map = create_map("default_map", 32'h00000000, 4, UVM_LITTLE_ENDIAN);

    ID = new("ID", 32, UVM_NO_COVERAGE);
    ID.configure(this, null, "");
    ID.build();
    default_map.add_reg(ID, 32'h00, "RO");

    Clock = new("Clock", 32, UVM_NO_COVERAGE);
    Clock.configure(this, null, "");
    Clock.build();
    default_map.add_reg(Clock, 32'h04, "RW");
  endfunction
endclass : block_reg_control

class block_reg_common extends uvm_reg_block;
  rand reg_reg_TIMER TIMER;

  function new(string name="block_reg_common");
    super.new(name);
  endfunction

  function void build();
    default_map = create_map("default_map", 32'h00000100, 4, UVM_LITTLE_ENDIAN);

    TIMER = new("TIMER", 32, UVM_NO_COVERAGE);
    TIMER.configure(this, null, "");
    TIMER.build();
    default_map.add_reg(TIMER, 32'h00, "RW");
  endfunction
endclass : block_reg_common

class reg_ral_model extends uvm_reg_block;
  rand block_reg_control control;
  rand block_reg_common common;

  function new(string name="reg_ral_model");
    super.new(name);
  endfunction

  function void build();
    default_map = create_map("default_map", 0, 4, UVM_LITTLE_ENDIAN);

    control = new("control");
    control.configuration(this);
    control.build();
    default_map.add_submap(control.default_map, 32'h00000000);

    common = new("common");
    common.configuration(this);
    common.build();
    default_map.add_submap(common.default_map, 32'h00000100);
  endfunction
endclass : reg_ral_model

`endif